<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charari的自留地</title>
  
  <subtitle>和をもって貴しとなす</subtitle>
  <link href="https://charari-2000.github.io/atom.xml" rel="self"/>
  
  <link href="https://charari-2000.github.io/"/>
  <updated>2021-06-06T03:22:27.794Z</updated>
  <id>https://charari-2000.github.io/</id>
  
  <author>
    <name>Charari</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据的存储</title>
    <link href="https://charari-2000.github.io/2021/06/06/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>https://charari-2000.github.io/2021/06/06/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/</id>
    <published>2021-06-06T02:36:21.000Z</published>
    <updated>2021-06-06T03:22:27.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-整型数据的存储"><a class="header-anchor" href="#1-整型数据的存储">¶</a>1.整型数据的存储</h2><p>对于整型数据，在内存中以补码存储，对于正数，其原码与补码相同，对于负数，其补码等于原码的反码+1</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">-10</span>;</span><br></pre></td></tr></table></figure><p>其在内存中的存储分别为：</p><p><img src="https://i.loli.net/2021/06/06/9OJtPfLIWBi82Mj.png" alt="a的存储"></p><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">a的存储</center><p><img src="https://i.loli.net/2021/06/06/kqvwAubQpCSDFXN.png" alt="b的存储"></p><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">b的存储</center><p>即20的补码为0000 0000 0000 0000 0000 0000 0001 0100<br>   -10的补码为1111 1111 1111 1111 1111 1111 1111 0110</p><p>之所以内存视图中显示的存储序列与实际相反，是因为所使用的机器为大端模式，所谓大端模式，即数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中。</p><p>实例1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">char</span> b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = -1, b = -1, c = 255</span><br></pre></td></tr></table></figure><p>解释：</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-整型数据的存储&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-整型数据的存储&quot;&gt;¶&lt;/a&gt;1.整型数据的存储&lt;/h2&gt;
&lt;p&gt;对于整型数据，在内存中以补码存储，对于正数，其原码与补码相同，对于负数，其补码等于原码的反码+1&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="C" scheme="https://charari-2000.github.io/categories/C/"/>
    
    
    <category term="C" scheme="https://charari-2000.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>开博有益</title>
    <link href="https://charari-2000.github.io/2021/04/03/%E5%BC%80%E5%8D%9A%E6%9C%89%E7%9B%8A/"/>
    <id>https://charari-2000.github.io/2021/04/03/%E5%BC%80%E5%8D%9A%E6%9C%89%E7%9B%8A/</id>
    <published>2021-04-02T17:57:02.000Z</published>
    <updated>2021-04-02T17:10:14.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-自我介绍"><a class="header-anchor" href="#1-自我介绍">¶</a>1. 自我介绍</h2><p>  我是Charari,是国内某不知名双非一本院校的一名计算机专业的学生，今年大二。虽然这样说，但这仅是我在计算机系的第一年，大一是数学系，转专业没什么特别的原因，只是因为兴趣。虽然用了一个学期勉力跟上了课程，但仍然时常发觉自己的不足，怀着这样的心情，开启了博客生涯。希望此博客记录我成长的同时，也能将经验和思考积累起来，成为自己的财富。</p><h2 id="2-目标"><a class="header-anchor" href="#2-目标">¶</a>2. 目标</h2><p>  能够熟练掌握并灵活运用至少一门编程语言-&gt;能够开阔思路，不拘泥于已有的“轮子”，具有发现算法问题并优化的能力-&gt;进行一定的项目实战，积累能力和经验并积极参加一些相关比赛</p><h2 id="3-如何学习"><a class="header-anchor" href="#3-如何学习">¶</a>3. 如何学习</h2><p>  在课下积极实践，夯实基础，总结提高，坚持自己思考问题，解决问题；隔一段时间将所得体现在博客上。</p><h2 id="4-关于未来"><a class="header-anchor" href="#4-关于未来">¶</a>4. 关于未来</h2><p>  没有建立在实力上的构想是空洞的，所以过一段时间再说</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">梦开始的地方</summary>
    
    
    
    <category term="自我介绍" scheme="https://charari-2000.github.io/categories/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
    
    <category term="自我介绍" scheme="https://charari-2000.github.io/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>

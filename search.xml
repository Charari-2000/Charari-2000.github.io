<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>字符串&amp;内存函数</title>
    <url>/2021/08/10/%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="本篇主要内容："><a class="header-anchor" href="#本篇主要内容：">¶</a>本篇主要内容：</h2>
<ul>
<li>求字符串长度
<ul>
<li>strlen</li>
</ul>
</li>
<li>长度不受限制的字符串函数
<ul>
<li>strcpy</li>
<li>strcat</li>
<li>strcmp</li>
</ul>
</li>
<li>长度受限制的字符串函数
<ul>
<li>strncpy</li>
<li>strncat</li>
<li>strncmp</li>
</ul>
</li>
<li>字符串查找
<ul>
<li>strstr</li>
<li>strtok</li>
</ul>
</li>
<li>错误处理
<ul>
<li>strerror</li>
</ul>
</li>
<li>字符操作</li>
<li>内存操作函数
<ul>
<li>memcpy</li>
<li>memmove</li>
<li>memset</li>
<li>memcmp</li>
</ul>
</li>
</ul>
<h2 id="1-strlen"><a class="header-anchor" href="#1-strlen">¶</a>1.strlen</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">strlen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>strlen函数返回的是在字符串中’\0’前面出现的字符的个数（不包含’\0’）</p>
</li>
<li>
<p>参数必须以’\0’结束</p>
</li>
<li>
<p>返回值类型是size_t，是无符号的</p>
</li>
</ul>
<h5 id="模拟实现："><a class="header-anchor" href="#模拟实现：">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">myStrlen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(str != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( *str++ != <span class="string">&#x27;\0&#x27;</span> )</span><br><span class="line">        len++;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-strcpy"><a class="header-anchor" href="#2-strcpy">¶</a>2.strcpy</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>源字符串必须以’\0’结尾</p>
</li>
<li>
<p>目标空间应该足够大，确保可以存放源字符串</p>
</li>
<li>
<p>目标空间必须可变</p>
</li>
</ul>
<h5 id="模拟实现：-v2"><a class="header-anchor" href="#模拟实现：-v2">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">myStrcpy</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( i++, src[i] != <span class="string">&#x27;\0&#x27;</span> )</span><br><span class="line">        dest[i] = src[i];</span><br><span class="line">    dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-strcat"><a class="header-anchor" href="#3-strcat">¶</a>3.strcat</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcat</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>源字符串必须以’\0’结尾</p>
</li>
<li>
<p>目标空间应该足够大，可以容纳下目标空间已有字符串和目标字符串空间之和</p>
</li>
<li>
<p>目标空间必须可变</p>
</li>
</ul>
<h5 id="模拟实现：-v3"><a class="header-anchor" href="#模拟实现：-v3">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">myStrcat</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( i++, dest[i] != <span class="string">&#x27;\0&#x27;</span> );</span><br><span class="line">    <span class="keyword">while</span> ( *src != <span class="string">&#x27;\0&#x27;</span> ) &#123;</span><br><span class="line">        dest[i] = *src;</span><br><span class="line">        src++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-strcmp"><a class="header-anchor" href="#4-strcmp">¶</a>4.strcmp</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2 )</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="结果如下："><a class="header-anchor" href="#结果如下：">¶</a><strong>结果如下：</strong></h5>
<p><img src="https://i.loli.net/2021/08/14/9QhtpDJ2B4Cex37.gif" alt="strcmp结果"></p>
<h5 id="模拟实现：-v4"><a class="header-anchor" href="#模拟实现：-v4">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStrcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert( str1 != <span class="literal">NULL</span> );</span><br><span class="line">    assert( str2 != <span class="literal">NULL</span> );</span><br><span class="line">    str1--;</span><br><span class="line">    str2--;</span><br><span class="line">    <span class="keyword">while</span> ( str1++, str2++, *str1 != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *str2 != <span class="string">&#x27;\0&#x27;</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *str1 == *str2 )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> *str1 - *str2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *str1 == <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *str2 == <span class="string">&#x27;\0&#x27;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> *str1 - *str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-strncpy"><a class="header-anchor" href="#5-strncpy">¶</a>5.strncpy</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strncpy</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果源字符串长度大于等于num，<font color="red">dest剩余部分不被添加’\0’</font>，于是dest不会以’\0’结束</p>
</li>
<li>
<p>如果源字符串的长度小于num,则拷贝完源字符串之后，<font color="red">在目标的后边追加’\0’</font>，直到第num个字符</p>
</li>
</ul>
<h5 id="模拟实现：-v5"><a class="header-anchor" href="#模拟实现：-v5">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">myStrncpy</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( src[i] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; i &lt; num ) &#123;</span><br><span class="line">        dest[i] = src[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; num ) &#123;</span><br><span class="line">        dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-strncat"><a class="header-anchor" href="#6-strncat">¶</a>6.strncat</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strncat</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>从源字符串中拷贝num个字符追加到dest后，<font color="red">并在其后加’\0’</font>，即最多有num+1个字符被追加，如果源字符串空间不足，则数据溢出</li>
</ul>
<h5 id="模拟实现：-v6"><a class="header-anchor" href="#模拟实现：-v6">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">myStrncat</span> <span class="params">( <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( dest[i] != <span class="string">&#x27;\0&#x27;</span> )</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">size_t</span> limit = i + num;</span><br><span class="line">    <span class="keyword">while</span> ( *src != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; i &lt; limit ) &#123;</span><br><span class="line">        dest[i] = *src;</span><br><span class="line">        src++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == limit )</span><br><span class="line">        dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-strncmp"><a class="header-anchor" href="#7-strncmp">¶</a>7.strncmp</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2 , <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>比较两字符串，直到字符串对应位不相同<font color="cyan">或</font>字符串结束<font color="cyan">或</font>字符串比较完</li>
</ul>
<h5 id="模拟实现：-v7"><a class="header-anchor" href="#模拟实现：-v7">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStrncmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(str1 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(str2 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> ( num-- ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *str1 != *str2 )</span><br><span class="line">            <span class="keyword">return</span> *str1 - *str2;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            str1++;</span><br><span class="line">            str2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-strstr"><a class="header-anchor" href="#8-strstr">¶</a>8.strstr</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strstr</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* substr )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回子字符串substr在str中第一次出现的位置，如果substr在str中不存在，则返回’\0’</li>
</ul>
<h5 id="模拟实现：（常用的方法有暴力查找法、kmp算法、bm算法等，此处仅实现暴力查找和kmp算法，相关的说明以及其他算法留待算法部分实现）"><a class="header-anchor" href="#模拟实现：（常用的方法有暴力查找法、kmp算法、bm算法等，此处仅实现暴力查找和kmp算法，相关的说明以及其他算法留待算法部分实现）">¶</a><strong>模拟实现</strong>：（常用的方法有暴力查找法、kmp算法、bm算法等，此处仅实现暴力查找和kmp算法，相关的说明以及其他算法留待算法部分实现）</h5>
<p>暴力查找：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">strstr_force</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">int</span> len_txt = <span class="built_in">strlen</span>(str1);</span><br><span class="line">	<span class="keyword">int</span> len_mod = <span class="built_in">strlen</span>(str2);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ret = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len_txt &amp;&amp; j &lt; len_mod; i++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( str1[i] == str2[j] )</span><br><span class="line">			j++;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			i -= j;</span><br><span class="line">			j = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ( j == len_mod )</span><br><span class="line">		ret = &amp;str1[i - j];</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>kmp算法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">get_next</span> <span class="params">( <span class="keyword">int</span>* next, <span class="keyword">const</span> <span class="keyword">char</span>* mod, <span class="keyword">int</span> len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> ( j &lt; len ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( k == <span class="number">-1</span> || mod[k] == mod[j] ) &#123;</span><br><span class="line">			j++;</span><br><span class="line">			k++;</span><br><span class="line">			<span class="keyword">if</span> ( mod[j] != mod[k] )</span><br><span class="line">				next[j] = k;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next[j] = next[k];</span><br><span class="line">		&#125;<span class="keyword">else</span></span><br><span class="line">			k = next[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">strstr_kmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len_txt = <span class="built_in">strlen</span>(str1);</span><br><span class="line">	<span class="keyword">int</span> len_mod = <span class="built_in">strlen</span>(str2);</span><br><span class="line">	<span class="keyword">int</span>* <span class="keyword">restrict</span> next = (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(len_mod + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	get_next( next, str2, len_mod );</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len_txt; i++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( str1[i] == str2[j] )&#123;</span><br><span class="line">			<span class="keyword">while</span> ( str1[i] == str2[j] ) &#123;</span><br><span class="line">				i++;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> ( j == len_mod ) &#123;</span><br><span class="line">				<span class="built_in">free</span>(next);</span><br><span class="line">				<span class="keyword">return</span> &amp;str1[i - j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				j = next[j];</span><br><span class="line">				i--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(next);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-strtok"><a class="header-anchor" href="#9-strtok">¶</a>9.strtok</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strtok</span> <span class="params">( <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* sep )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>sep参数是一个字符串，定义了作为分隔符的字符集合</p>
</li>
<li>
<p>第一个参数指定一个字符串，它包含了0个或多个分隔符分隔的标记</p>
</li>
<li>
<p>strtok函数找到str中的下一个标记，并将其用’\0’结尾，返回一个指向这个标记的指针（<font color="red">strtok会破坏源字符串</font>）</p>
</li>
<li>
<p>strtok函数的第一个参数不为NULL,函数将找到str中的第一个标记，strtok函数将保存它在字符串中的位置</p>
</li>
<li>
<p>strtok函数的第一个参数为NULL,函数将在同一个字符串中被保存的位置开始，查找下一个标记</p>
</li>
<li>
<p>综上所述，strtok是一个不可重入函数，其返回结果受到调用此函数的其他程序的影响，因此具有线程不安全的特点（线程安全版本: strtok_r(Linux/MacOS)、strtok_s(Windows) ，但这两个函数都不是C语言标准的一部分）</p>
</li>
</ul>
<h5 id="调用方法：（示例来自cplusplus）"><a class="header-anchor" href="#调用方法：（示例来自cplusplus）">¶</a><strong>调用方法：</strong>（示例来自<a href="https://www.cplusplus.com/reference/cstring/strtok/?kw=strtok">cplusplus</a>）</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[] =<span class="string">&quot;- This, a sample string.&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> * pch;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;Splitting string \&quot;%s\&quot; into tokens:\n&quot;</span>,str);</span><br><span class="line">  pch = strtok (str,<span class="string">&quot; ,.-&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (pch != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%s\n&quot;</span>,pch);</span><br><span class="line">    pch = strtok (<span class="literal">NULL</span>, <span class="string">&quot; ,.-&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-strerror"><a class="header-anchor" href="#10-strerror">¶</a>10.strerror</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strerror</span> <span class="params">( <span class="keyword">int</span> errnum )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回错误码（errno:一个C标准定义的extern变量，用于存储错误代码）对应的错误信息</li>
</ul>
<h2 id="11-一些字符分类和转换函数"><a class="header-anchor" href="#11-一些字符分类和转换函数">¶</a>*11.一些字符分类和转换函数</h2>
<h3 id="（1）字符分类函数"><a class="header-anchor" href="#（1）字符分类函数">¶</a>（1）字符分类函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:left">函数返回值为真的条件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">iscntrl</td>
<td style="text-align:left">任何控制字符（acsii码0-31均为控制字符）</td>
</tr>
<tr>
<td style="text-align:center">isspace</td>
<td style="text-align:left">’ '（空格）、转义符</td>
</tr>
<tr>
<td style="text-align:center">isdigit</td>
<td style="text-align:left">十进制数字0-9</td>
</tr>
<tr>
<td style="text-align:center">isxdigit</td>
<td style="text-align:left">十六进制数字（0-9、a-f、A-F）</td>
</tr>
<tr>
<td style="text-align:center">islower</td>
<td style="text-align:left">a-z</td>
</tr>
<tr>
<td style="text-align:center">isupper</td>
<td style="text-align:left">A-Z</td>
</tr>
<tr>
<td style="text-align:center">isalpha</td>
<td style="text-align:left">a-z || A-Z</td>
</tr>
<tr>
<td style="text-align:center">isalnum</td>
<td style="text-align:left">a-z || A-Z || 0-9</td>
</tr>
<tr>
<td style="text-align:center">ispunct</td>
<td style="text-align:left">标点符号</td>
</tr>
<tr>
<td style="text-align:center">isgraph</td>
<td style="text-align:left">图形字符</td>
</tr>
<tr>
<td style="text-align:center">isprint</td>
<td style="text-align:left">任何可打印字符，包括图形字符和空白字符</td>
</tr>
</tbody>
</table>
<h3 id="（2）字符转换函数"><a class="header-anchor" href="#（2）字符转换函数">¶</a>（2）字符转换函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tolower</td>
<td>将字符转换为小写</td>
</tr>
<tr>
<td style="text-align:center">toupper</td>
<td>将字符转换为大写</td>
</tr>
</tbody>
</table>
<h2 id="12-memcpy"><a class="header-anchor" href="#12-memcpy">¶</a>12.memcpy</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memcpy</span> <span class="params">( <span class="keyword">void</span>* dest, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>函数memcpy从src的位置开始向后复制num个<font color="red">字节</font>的数据到dest的内存位置</p>
</li>
<li>
<p>这个函数支持任何类型，遇到’\0’时不会停下来</p>
</li>
<li>
<p>dest和src不可重叠</p>
</li>
</ul>
<h5 id="模拟实现：-v8"><a class="header-anchor" href="#模拟实现：-v8">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">myMemcpy</span> <span class="params">( <span class="keyword">void</span>* dest, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(source != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span>* dest_c = (<span class="keyword">char</span>*)dest;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* src_c = (<span class="keyword">const</span> <span class="keyword">char</span>*)source;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++ )</span><br><span class="line">        dest_c[i] = src_c[i];</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-memmove"><a class="header-anchor" href="#13-memmove">¶</a>13.memmove</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memmove</span> <span class="params">( <span class="keyword">void</span>* dest, <span class="keyword">void</span>* src, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>memcpy函数的支持dest和src重叠版本</li>
</ul>
<h5 id="模拟实现：-v9"><a class="header-anchor" href="#模拟实现：-v9">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">myMemmove</span> <span class="params">( <span class="keyword">void</span>* dest, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span>* dest_c = (<span class="keyword">char</span>*)dest;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* src_c = (<span class="keyword">const</span> <span class="keyword">char</span>*)src;</span><br><span class="line">    <span class="keyword">if</span> ( dest_c &lt;= src_c || dest_c &gt;= src_c + num ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i-- )</span><br><span class="line">            dest_c[i] = src_c[i];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i++ )</span><br><span class="line">            dest_c[i] = src_c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-memset"><a class="header-anchor" href="#14-memset">¶</a>14.memset</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memset</span> <span class="params">( <span class="keyword">void</span>* ptr, <span class="keyword">int</span> value, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>以value值对ptr指向的num字节空间进行初始化</li>
</ul>
<h5 id="模拟实现：-v10"><a class="header-anchor" href="#模拟实现：-v10">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">myMemset</span> <span class="params">( <span class="keyword">void</span>* ptr, <span class="keyword">int</span> value, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ptr != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span>* ptr_c = (<span class="keyword">char</span>*)ptr;</span><br><span class="line">    <span class="keyword">while</span> ( num-- ) &#123;</span><br><span class="line">        *ptr_c = value;</span><br><span class="line">        ptr_c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="15-memcmp"><a class="header-anchor" href="#15-memcmp">¶</a>15.memcmp</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">void</span>* ptr1, <span class="keyword">const</span> <span class="keyword">void</span>* ptr2, <span class="keyword">size_t</span> num )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>比较从ptr1和ptr2指向地址开始的num个字节空间</li>
<li>返回规则同strcmp</li>
</ul>
<h5 id="模拟实现：-v11"><a class="header-anchor" href="#模拟实现：-v11">¶</a><strong>模拟实现：</strong></h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mymemcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">void</span>* ptr1, <span class="keyword">const</span> <span class="keyword">void</span>* ptr2, <span class="keyword">size_t</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ptr1 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(ptr2 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(num != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> ( num-- ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *ptr1 != *ptr2 )</span><br><span class="line">            <span class="keyword">return</span> *ptr1 - *ptr2;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ptr1++;</span><br><span class="line">            ptr2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>指针进阶</title>
    <url>/2021/08/09/%E6%8C%87%E9%92%88%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="1-基础概念"><a class="header-anchor" href="#1-基础概念">¶</a>1.基础概念</h2>
<blockquote>
<ol>
<li>指针是一个变量，用来存放地址，地址唯一表示一块内存空间</li>
<li>指针的大小是固定的4/8个字节（32bit/64bit）</li>
<li>指针是有类型，指针的类型决定了指针的+/-整数的步长，指针解引用操作的时候的权限</li>
<li>指针的运算: +、-、*（解引用）</li>
</ol>
</blockquote>
<h2 id="2-字符指针（字符串）"><a class="header-anchor" href="#2-字符指针（字符串）">¶</a>2.字符指针（字符串）</h2>
<p>对于以下语句:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>字符指针str指向字符串&quot;hello world&quot;的首地址，即字符’h’，并不是指向整个字符串</p>
<h4 id="font-color-red-字符数组和字符指针表示字符串的区别-font"><a class="header-anchor" href="#font-color-red-字符数组和字符指针表示字符串的区别-font">¶</a><strong><font color="red">字符数组和字符指针表示字符串的区别</font></strong></h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* str3 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* str4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( str1 == str2 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1与str2一致\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1与str2不一致\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> ( str3 == str4 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str3与str4一致\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str3与str4不一致\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<blockquote>
<p>str1与str2不一致</p>
<p>str3与str4一致</p>
</blockquote>
<p>​	<em>原因</em>：str3和str4指向的是同一个常量字符串，常量字符串存储在特定的内存区域，故str3和str4指向同一块内存区域。而str1和str2指向的是字符串常量的拷贝，申请的空间位于内存栈区，且每初始化一个字符数组变量就拷贝一份，所以str1和str2并不指向同一块内存。</p>
<h2 id="3-指针数组-数组指针"><a class="header-anchor" href="#3-指针数组-数组指针">¶</a>3.指针数组&amp;数组指针</h2>
<ol>
<li>
<p><strong>指针数组</strong>：顾名思义，即存储指针的数组。形如：char* arr[4]、char** arr2[5]等；</p>
</li>
<li>
<p><strong>数组指针</strong>：指向数组的指针。形如：int (<em>p)[10]，即指向一个大小为10个整型变量的数组，其步长为<br>
$$<br>
4bytes * 10 = 40bytes<br>
$$<br>
因为本身是指针变量，所以所占空间为4bytes/8bytes，此处要注意的是，[]运算符的优先级高于</em>运算符，因此一定不可以省略()，以保证p先和*结合</p>
<p><strong><font color="red">eg. arr与&amp;arr的辨析</font></strong>（编译环境：GNU/LInux + gcc 11.1.0 + cmake 3.21.1）</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr = %p\n&quot;</span>, &amp;arr);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr + 1 = %p\n&quot;</span>, arr + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr + 1 = %p\n&quot;</span>, &amp;arr + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<blockquote>
<p>arr = 0x7ffeafd47100<br>
&amp;arr = 0x7ffeafd47100<br>
arr + 1 = 0x7ffeafd47104<br>
&amp;arr + 1 = 0x7ffeafd47128</p>
</blockquote>
<p>分析：<br>
由输出，arr的步长为4bytes，即跳过了一个int的长度，显然，arr指向数组首元素所在的地址，类型为int型；&amp;arr的步长为40bytes,即跳过了一个int[10]的长度，即&amp;arr指向数组的首地址，尽管这与数组首元素所在地址在数值上一样，但意义是完全不同的。</p>
<h2 id="4-数组参数-指针参数"><a class="header-anchor" href="#4-数组参数-指针参数">¶</a>4.数组参数 &amp; 指针参数</h2>
<p>一维数组传参：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>; 	<span class="comment">//OK</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span></span>;	<span class="comment">//OK</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>* arr)</span></span>;	<span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span>* arr[<span class="number">20</span>])</span></span>;<span class="comment">//OK</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span>** arr)</span></span>;	 <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>* arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    test2(arr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二维数组传参：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span>;	<span class="comment">//OK</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> arr[][])</span></span>;	<span class="comment">//ERROR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">(<span class="keyword">int</span> arr[][<span class="number">5</span>])</span></span>;	<span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">(<span class="keyword">int</span>* arr)</span></span>;		<span class="comment">//ERROR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">(<span class="keyword">int</span>* arr[<span class="number">5</span>])</span></span>;	<span class="comment">//ERROR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">(<span class="keyword">int</span> (*arr)[<span class="number">5</span>])</span></span>;	<span class="comment">//OK</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test7</span><span class="params">(<span class="keyword">int</span>** arr)</span></span>;		<span class="comment">//ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二维数组arr[3][5]可以理解为由3个int[5]类型元素组成的一维数组，由一维数组传参类比可知，数组元素个数传参时可以未知，但数组元素类型不可变，故test2、test7错误；同理，在C语言，任意一维数组int[]传参时隐式转成指针int*，即指向数组元素类型的指针，在上例二维数组arr[3][5]中，数组元素类型可视为int[5]，故传参时可以表示为指向int[5]类型元素的指针，即int (*arr)[5]，故test4、test5错，test6对。</p>
<p>一级指针传参：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>* p, <span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; sz; i++ )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>* p = arr;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二级指针传参：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>** ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span>* pc = &amp;c;</span><br><span class="line">    <span class="keyword">char</span>** ppc = &amp;pc;</span><br><span class="line">    test(&amp;pc);</span><br><span class="line">    test(ppc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-函数指针"><a class="header-anchor" href="#5-函数指针">¶</a>5.函数指针</h2>
<p>函数指针是指向函数的指针变量。</p>
<p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p>
<p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p>
<p>函数指针可以解引用和取地址，但不能做算数运算。</p>
<p>函数指针类型一般以一下形式定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">return_type</span> <span class="params">(*type_name)</span><span class="params">(parameter, ...)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="函数指针数组：可以用于替代条件判断语句调用同类型函数的情况，可以使得代码简洁。"><a class="header-anchor" href="#函数指针数组：可以用于替代条件判断语句调用同类型函数的情况，可以使得代码简洁。">¶</a><strong>函数指针数组</strong>：可以用于替代条件判断语句调用同类型函数的情况，可以使得代码简洁。</h4>
<h4 id="font-color-red-回调函数-font"><a class="header-anchor" href="#font-color-red-回调函数-font">¶</a><strong><font color="red">回调函数</font></strong></h4>
<blockquote>
<p>回调函数就是一个通过函数指针调用的函数，如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说它是回调函数。回调函数不是由该函数的实现方调用，而是在特定的事件或条件发生时由另外一方调用的，用于对特定时间或条件进行相应。</p>
</blockquote>
<p><strong>eg.</strong> qsort的模拟实现（冒泡排序）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">int_cmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">void</span>* p1, <span class="keyword">const</span> <span class="keyword">void</span>* p2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="keyword">int</span>*)p1 &gt; *(<span class="keyword">int</span>*)p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _swap ( <span class="keyword">void</span>* p1, <span class="keyword">void</span>* p2, <span class="keyword">int</span> size )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; size; i++ ) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = *((<span class="keyword">char</span>*)p1 + i);</span><br><span class="line">        *((<span class="keyword">char</span>*)p1 + i) = *((<span class="keyword">char</span>*)p2 + i);</span><br><span class="line">        *((<span class="keyword">char</span>*)p2 + i) = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span> <span class="params">( <span class="keyword">void</span>* base, <span class="keyword">int</span> count, <span class="keyword">int</span> size, <span class="keyword">int</span>(*cmp)( <span class="keyword">void</span>*, <span class="keyword">void</span>* ))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; count - i - <span class="number">1</span>; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( cmp ( (<span class="keyword">char</span>*)base + j * size, (<span class="keyword">char</span>*)base + ( j + <span class="number">1</span> ) * size ) &gt; <span class="number">0</span> )</span><br><span class="line">                _swap ( (<span class="keyword">char</span>*)base + j * size, (<span class="keyword">char</span>*)base + ( j + <span class="number">1</span> ) * size, size );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    bubbleSort ( arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="keyword">sizeof</span>(<span class="keyword">int</span>), int_cmp );</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>); i++ )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="font-color-red-void-型指针-font"><a class="header-anchor" href="#font-color-red-void-型指针-font">¶</a><em><em><font color="red">void</em> 型指针</font></em>*</h4>
<p>C语言中一种泛型编程的不完美实现形式，该类指针只存储地址，不知其存储类型长度，故不可解引用，使用时需要使用强制类型转换转为所需类型的指针，作为函数传参时往往需要指定对应类型字节数。</p>
<h2 id="6-总结：指针与数组的辨析（以程序为例）"><a class="header-anchor" href="#6-总结：指针与数组的辨析（以程序为例）">¶</a>6.总结：指针与数组的辨析（以程序为例）</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a));				  <span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">0</span>));			  <span class="comment">//8:int*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*a));			  <span class="comment">//4:int</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">1</span>));			  <span class="comment">//8:int*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">1</span>]));			  <span class="comment">//4:int</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a));			  <span class="comment">//8:int(*)[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*&amp;a));			  <span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;*a));			  <span class="comment">//8:int*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a + <span class="number">1</span>));		  <span class="comment">//8:int(*)[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));		  <span class="comment">//8:int*</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> arr[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(arr));			  <span class="comment">//6:char[6]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(arr + <span class="number">0</span>));		  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*arr));			  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">1</span>));			  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">1</span>]));			  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a));			  <span class="comment">//8:char(*)[6]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*&amp;a));			  <span class="comment">//6:char[6]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;*a));			  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a + <span class="number">1</span>));		  <span class="comment">//8:char(*)[6]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>));		  <span class="comment">//8:char*</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str));			  <span class="comment">//7:char[7]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str + <span class="number">0</span>));		  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*str));			  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str[<span class="number">1</span>]));		  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str[<span class="number">1</span>] + <span class="number">1</span>));	  <span class="comment">//4:int(整型提升, char和int进行计算)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(str[<span class="number">1</span>]) + <span class="number">1</span>);	  <span class="comment">//2:char + 1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;str));			  <span class="comment">//8:char(*)[7]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;str + <span class="number">1</span>));		  <span class="comment">//8:char(*)[7]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;str[<span class="number">0</span>] + <span class="number">1</span>));	  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*&amp;str));			  <span class="comment">//7:char[7]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;*str));			  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*&amp;str + <span class="number">1</span>));		  <span class="comment">//8:char*</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, sizeof(*&amp;(a + 1)));		  //error:右值不能取地址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(str));			  <span class="comment">//6</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(str + <span class="number">0</span>));		  <span class="comment">//6</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(*str));			  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(str[1]));		  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(&amp;str));			  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(&amp;str + 1));		  //undefined behavior</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(&amp;str[<span class="number">0</span>] + <span class="number">1</span>));	  <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(p));				  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(p + <span class="number">1</span>));			  <span class="comment">//8:char*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*p));			  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(p[<span class="number">0</span>]));			  <span class="comment">//1:char</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p));			  <span class="comment">//8:char**</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p + <span class="number">1</span>));		  <span class="comment">//8:char**</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));		  <span class="comment">//8:char*</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(p));			      <span class="comment">//6</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(p + <span class="number">1</span>));			  <span class="comment">//5</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(*p));			  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(p[0]));			  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(&amp;p));			  //undefined behavior</span></span><br><span class="line"><span class="comment">//	printf(&quot;%lu\n&quot;, strlen(&amp;p + 1));		  //undefined behavior</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>));		  <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n======================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>));			  <span class="comment">//48:int[3][4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>][<span class="number">0</span>]));	  <span class="comment">//4:int</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]));		  <span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>] + <span class="number">1</span>));    <span class="comment">//8:int*</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*(<span class="built_in">array</span>[<span class="number">0</span>] + <span class="number">1</span>))); <span class="comment">//4:int</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span> + <span class="number">1</span>));		  <span class="comment">//8:int(*)[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*(<span class="built_in">array</span> + <span class="number">1</span>)));	  <span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;<span class="built_in">array</span>[<span class="number">0</span>] + <span class="number">1</span>));	  <span class="comment">//8:int(*)[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*(&amp;<span class="built_in">array</span>[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(*<span class="built_in">array</span>));		  <span class="comment">//16:int[4]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">3</span>]));		  <span class="comment">//16:int[4]（虽然看起来数组越界，但sizeof为编译期求值，下标越界是运行时行为，编译后代码实际转为sizeof(int[4])）</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>数据的存储</title>
    <url>/2021/06/06/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="1-整型数据的存储"><a class="header-anchor" href="#1-整型数据的存储">¶</a>1.整型数据的存储</h2>
<p>对于整型数据，在内存中以补码存储，对于正数，其原码与补码相同，对于负数，其补码等于原码的反码+1</p>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">-10</span>;</span><br></pre></td></tr></table></figure>
<p>其在内存中的存储分别为：</p>
<p><img src="https://i.loli.net/2021/06/06/9OJtPfLIWBi82Mj.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">a的存储</center>
<p><img src="https://i.loli.net/2021/06/06/kqvwAubQpCSDFXN.png" alt=""></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">b的存储</center>
<p>即20的补码为0000 0000 0000 0000 0000 0000 0001 0100<br>
  -10的补码为1111 1111 1111 1111 1111 1111 1111 0110</p>
<p>之所以内存视图中显示的存储序列与实际相反，是因为所使用的机器为大端模式，所谓大端模式，即数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中。</p>
<p>实例1.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">char</span> b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a = -1, b = -1, c = 255</span><br></pre></td></tr></table></figure>
<p>解释：（当未声明有无符号时，隐式声明为有符号，故a与b等价）字符型变量在内存中占据1个字节（8个比特位），所以-1在内存中存储为1111 1111，在输出中格式化为int型，因符号位为1,则在此数前添’1’直到补全数位，即a和b转为1111 1111 1111 1111 1111 1111 1111 1111，即-1；对于c,无符号型变量被赋负值时，强制转为有符号数，即(1111 1111)B = 255，输出时格式化为int直接在此数前添’0’直到补全数位，即c转为0000 0000 0000 0000 0000 0000 1111 1111，即255.</p>
<p>实例2.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">-128</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4294967168</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p><img src="https://i.loli.net/2021/06/09/Hqdj8rvmcaQhLSK.png" alt=""></p>
<p><font color="red"><strong>小结</strong></font>:</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">无符号➡有符号</th>
<th style="text-align:center">有符号➡无符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">小➡大</td>
<td style="text-align:center">如果源变量被赋值为负数，直接将其转为对应无符号数然后以’0’补齐数位；</br>如果源变量被赋值为正数，直接以’0’补齐数位即可</td>
<td style="text-align:center">以源变量符号位处二进制值补齐数位</td>
</tr>
<tr>
<td style="text-align:center">大➡小</td>
<td style="text-align:center">直接截断</td>
<td style="text-align:center">直接截断</td>
</tr>
</tbody>
</table>
<p>实例3：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">128</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4294967168</span><br></pre></td></tr></table></figure>
<p>解释：128超过char的表数范围，因为127 = (0111 1111)B，所以128被转为-128 = (1000 0000)B，输出时格式化为(unsigned int)，根据小结中的内容，以’1’补全数位，即为4294967168 = (1111 1111 1111 1111 1111 1111 1000 0000)B。</p>
<p>实例4：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">-20</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i + j);</span><br><span class="line"><span class="comment">//按照补码形式运算，最后格式化为有符号整数</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-10</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p><img src="https://i.loli.net/2021/06/09/78dTlGnotkaQBUw.png" alt=""></p>
<p>实例5：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i-- )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);</span><br></pre></td></tr></table></figure>
<p>输出结果：死循环，因为i为无符号数，当i = 0时，i自减，得到补码为1111 1111 1111 1111 1111 1111 1111 1111的数，即INT_MAX。</p>
<p>实例6：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ )</span><br><span class="line">        a[i] = <span class="number">-1</span> - i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">255</span><br></pre></td></tr></table></figure>
<p>解释：strlen() 查找到acsii码值为0的字符串即停止截取，由题意:a[0] = -1, a[1] = -2, ……, a[127] = -128, a[128] = 127, a[129] = 126, ……, a[254] = 1, a[255] = 0(停止截取), a[256] = -1, ……, a[1000] = …(程序停止)</p>
<p>实例7：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> num = <span class="number">32767</span>;</span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> a = num + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-32768</span><br></pre></td></tr></table></figure>
<p>解释：0111 1111 1111 1111 ➡ 1000 0000 0000 0000</p>
<p>实例8：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++ )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：hello world(死循环)</p>
<p>解释：255 = (1111 1111)B ➡ (0000 0000)B = 0</p>
<h2 id="2-浮点型在内存中的存储"><a class="header-anchor" href="#2-浮点型在内存中的存储">¶</a>2.浮点型在内存中的存储</h2>
<p>浮点数在内存中使用二进制科学计数法存储，根据IEEE 754的规定，浮点数NUM=(-1)^S * M * 2^E由符号位S、阶码E、尾数M组成，对于float、double型变量：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">符号位数</th>
<th style="text-align:center">阶码位数</th>
<th style="text-align:center">尾数位数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">1</td>
<td style="text-align:center">11</td>
<td style="text-align:center">52</td>
</tr>
</tbody>
</table>
<p>根据上述标准规定，在存储一个浮点数时，需要做如下处理（浮点数已经被化为其二进制形式）：</p>
<p>  1.将浮点数化为±1.xxxxxxxxxxxx… * 2^X 的形式（x为0或1）；</p>
<p>  2.对于符号位的处理与整形相同，负数为1,正数为0；</p>
<p>  3.对于尾数，由于浮点数均被化为±1.xxxxxxxxxxxx… * 2^X 的形式，所以尾数最高位必有1,则浮点数存储时将最高位的’1’省去，这样可以以23位阶码（以float型为例）表示24位有效数字；</p>
<p>  4.对于阶码，有公式E=X + 对应类型指数偏移量，公式中的指数偏移量，float型位127(0111 1111),double型为1023(0111 1111 1111),这样做旨在消除阶码中的负值，便于浮点数进行比较。</p>
<p><strong><font color="red">小结</font></strong>:</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">占用内存</th>
<th style="text-align:center">内存分配</th>
<th style="text-align:center">指数范围</th>
<th style="text-align:center">指数偏移</th>
<th style="text-align:center">范围（约等于）</th>
<th style="text-align:center">精度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">单精度浮点数</td>
<td style="text-align:center">32</td>
<td style="text-align:center">见前表</td>
<td style="text-align:center">[-127, 128]</td>
<td style="text-align:center">+127</td>
<td style="text-align:center">[-3.4 * 10<sup>38</sup>, -1.18 * 10^<sup>-38</sup>] ∪ [1.18 * 10<sup>-38</sup>, 3.4 * 10<sup>38</sup>]</td>
<td style="text-align:center">约7位有效数</td>
</tr>
<tr>
<td style="text-align:center">双精度浮点数</td>
<td style="text-align:center">64</td>
<td style="text-align:center">见前表</td>
<td style="text-align:center">[-1023, 1024]</td>
<td style="text-align:center">+1023</td>
<td style="text-align:center">[-1.8 * 10<sup>308</sup>, -2.23 * 10<sup>-308</sup>] ∪ [2.23 * 10<sup>-308</sup>, 1.8 * 10<sup>308</sup>]</td>
<td style="text-align:center">约16位有效数</td>
</tr>
</tbody>
</table>
<p>示例：对于float型变量2.1,其内存视图如图所示</p>
<p><img src="https://i.loli.net/2021/06/08/9IhMvi6GonUuSpF.png" alt="浮点数2.1的内存视图"></p>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">浮点数2.1的内存视图</center>
<p>对于浮点型变量2.5,易得其二进制形式为10.1。首先，数2.1为正数，易得其符号位为0。先将其转为二进制科学计数法形式表示，即10.1 = 1.01 * 2<sup>1</sup>，其2的指数为1,单精度浮点型的指数偏移量为127,所以其阶码为(0111 1111)B + (0000 0001)B = (1000 0000)B，23位尾数省去第一个1,并使用0将数位补全，故其尾数为0100 0000 0000 0000 0000 000。综上所述，2.5在内存中表示为0100 0000 0010 0000 0000 0000 0000 0000，即40 20 00 00，由于所用机器为大端机，故表示为00 00 20 40,如上图所示。</p>
<p><strong><font color="red">*两种特殊的浮点数：</font></strong></p>
<p>1.INFINITY:即无穷大，在内存中表示为阶码全为1,原码全为0。产生原因（部分）：正浮点数/0.0 = inf, 负浮点数/0.0 = -inf, 0.0 + inf = inf, log(0.0) = -inf；</p>
<p>2.NAN:即非数，在内存中表示为阶码全为1，原码不全为0。产生原因（部分）：对负数开方，对负数求对数，0.0 / 0.0, 0.0 * inf, inf / inf, inf - inf；</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>内存</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>开博有益</title>
    <url>/2021/04/03/%E5%BC%80%E5%8D%9A%E6%9C%89%E7%9B%8A/</url>
    <content><![CDATA[<h2 id="自我介绍">1. 自我介绍</h2>
<p>  我是Charari,是国内某不知名双非一本院校的一名计算机专业的学生，今年大二。虽然这样说，但这仅是我在计算机系的第一年，大一是数学系，转专业没什么特别的原因，只是因为兴趣。虽然用了一个学期勉力跟上了课程，但仍然时常发觉自己的不足，怀着这样的心情，开启了博客生涯。希望此博客记录我成长的同时，也能将经验和思考积累起来，成为自己的财富。 ## 2. 目标   能够熟练掌握并灵活运用至少一门编程语言-&gt;能够开阔思路，不拘泥于已有的“轮子”，具有发现算法问题并优化的能力-&gt;进行一定的项目实战，积累能力和经验并积极参加一些相关比赛 ## 3. 如何学习   在课下积极实践，夯实基础，总结提高，坚持自己思考问题，解决问题；隔一段时间将所得体现在博客上。 ## 4. 关于未来   没有建立在实力上的构想是空洞的，所以过一段时间再说</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>自我介绍</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>数据的存储</title>
    <url>/2021/06/06/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="整型数据的存储">1.整型数据的存储</h2>
<p>对于整型数据，在内存中以补码存储，对于正数，其原码与补码相同，对于负数，其补码等于原码的反码+1</p>
<p>eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">-10</span>;</span><br></pre></td></tr></table></figure>
<p>其在内存中的存储分别为：</p>
<figure>
<img src="https://i.loli.net/2021/06/06/9OJtPfLIWBi82Mj.png" alt="a的存储" /><figcaption aria-hidden="true">a的存储</figcaption>
</figure>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">
a的存储
</center>
<figure>
<img src="https://i.loli.net/2021/06/06/kqvwAubQpCSDFXN.png" alt="b的存储" /><figcaption aria-hidden="true">b的存储</figcaption>
</figure>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">
b的存储
</center>
<p>即20的补码为0000 0000 0000 0000 0000 0000 0001 0100   -10的补码为1111 1111 1111 1111 1111 1111 1111 0110</p>
<p>之所以内存视图中显示的存储序列与实际相反，是因为所使用的机器为大端模式，所谓大端模式，即数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中。</p>
<p>实例1.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">char</span> b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">a = -1, b = -1, c = 255</span><br></pre></td></tr></table></figure>
<p>解释：（当未声明有无符号时，隐式声明为有符号，故a与b等价）字符型变量在内存中占据1个字节（8个比特位），所以-1在内存中存储为1111 1111，在输出中格式化为int型，因符号位为1,则在此数前添'1'直到补全数位，即a和b转为1111 1111 1111 1111 1111 1111 1111 1111，即-1；对于c,无符号型变量被赋负值时，强制转为有符号数，即(1111 1111)B = 255，输出时格式化为int直接在此数前添'0'直到补全数位，即c转为0000 0000 0000 0000 0000 0000 1111 1111，即255.</p>
<p>实例2.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">-128</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4294967168</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<figure>
<img src="https://i.loli.net/2021/06/09/Hqdj8rvmcaQhLSK.png" alt="公式" /><figcaption aria-hidden="true">公式</figcaption>
</figure>
<p><font color="red"><strong>小结</strong></font>:</p>
<table style="width:100%;">
<colgroup>
<col style="width: 28%" />
<col style="width: 42%" />
<col style="width: 28%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">无符号➡有符号</th>
<th style="text-align: center;">有符号➡无符号</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">小➡大</td>
<td style="text-align: center;">如果源变量被赋值为负数，直接将其转为对应无符号数然后以'0'补齐数位；</br>如果源变量被赋值为正数，直接以'0'补齐数位即可</td>
<td style="text-align: center;">以源变量符号位处二进制值补齐数位</td>
</tr>
<tr class="even">
<td style="text-align: center;">大➡小</td>
<td style="text-align: center;">直接截断</td>
<td style="text-align: center;">直接截断</td>
</tr>
</tbody>
</table>
<p>实例3：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">128</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4294967168</span><br></pre></td></tr></table></figure>
<p>解释：128超过char的表数范围，因为127 = (0111 1111)B，所以128被转为-128 = (1000 0000)B，输出时格式化为(unsigned int)，根据小结中的内容，以'1'补全数位，即为4294967168 = (1111 1111 1111 1111 1111 1111 1000 0000)B。</p>
<p>实例4：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">-20</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i + j);</span><br><span class="line"><span class="comment">//按照补码形式运算，最后格式化为有符号整数</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-10</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<figure>
<img src="https://i.loli.net/2021/06/09/78dTlGnotkaQBUw.png" alt="公式" /><figcaption aria-hidden="true">公式</figcaption>
</figure>
<p>实例5：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i-- )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);</span><br></pre></td></tr></table></figure>
<p>输出结果：死循环，因为i为无符号数，当i = 0时，i自减，得到补码为1111 1111 1111 1111 1111 1111 1111 1111的数，即INT_MAX。</p>
<p>实例6：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ )</span><br><span class="line">        a[i] = <span class="number">-1</span> - i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">255</span><br></pre></td></tr></table></figure>
<p>解释：strlen() 查找到acsii码值为0的字符串即停止截取，由题意:a[0] = -1, a[1] = -2, ……, a[127] = -128, a[128] = 127, a[129] = 126, ……, a[254] = 1, a[255] = 0(停止截取), a[256] = -1, ……, a[1000] = ...(程序停止)</p>
<p>实例7：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> num = <span class="number">32767</span>;</span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> a = num + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">-32768</span><br></pre></td></tr></table></figure>
<p>解释：0111 1111 1111 1111 ➡ 1000 0000 0000 0000</p>
<p>实例8：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++ )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：hello world(死循环)</p>
<p>解释：255 = (1111 1111)B ➡ (0000 0000)B = 0</p>
<h2 id="浮点型在内存中的存储">2.浮点型在内存中的存储</h2>
<p>浮点数在内存中使用二进制科学计数法存储，根据IEEE 754的规定，浮点数NUM=(-1)^S * M * 2^E由符号位S、阶码E、尾数M组成，对于float、double型变量：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类型</th>
<th style="text-align: center;">符号位数</th>
<th style="text-align: center;">阶码位数</th>
<th style="text-align: center;">尾数位数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">float</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">23</td>
</tr>
<tr class="even">
<td style="text-align: center;">double</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">52</td>
</tr>
</tbody>
</table>
<p>根据上述标准规定，在存储一个浮点数时，需要做如下处理（浮点数已经被化为其二进制形式）：</p>
<p>  1.将浮点数化为$$1.xxxxxxxxxxxx... * 2^X 的形式（x为0或1）；</p>
<p>  2.对于符号位的处理与整形相同，负数为1,正数为0；</p>
<p>  3.对于尾数，由于浮点数均被化为$$1.xxxxxxxxxxxx... * 2^X 的形式，所以尾数最高位必有1,则浮点数存储时将最高位的'1'省去，这样可以以23位阶码（以float型为例）表示24位有效数字；</p>
<p>  4.对于阶码，有公式E=X + 对应类型指数偏移量，公式中的指数偏移量，float型位127(0111 1111),double型为1023(0111 1111 1111),这样做旨在消除阶码中的负值，便于浮点数进行比较。</p>
<p><strong><font color="red">小结</font></strong>:</p>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 6%" />
<col style="width: 6%" />
<col style="width: 10%" />
<col style="width: 6%" />
<col style="width: 49%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">类型</th>
<th style="text-align: center;">占用内存</th>
<th style="text-align: center;">内存分配</th>
<th style="text-align: center;">指数范围</th>
<th style="text-align: center;">指数偏移</th>
<th style="text-align: center;">范围（约等于）</th>
<th style="text-align: center;">精度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">单精度浮点数</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">见前表</td>
<td style="text-align: center;">[-127, 128]</td>
<td style="text-align: center;">+127</td>
<td style="text-align: center;">[-3.4 * 10^38, -1.18 * 10^-38] <img src="https://i.loli.net/2021/06/09/Z4C19XOkBzTGUtR.png" alt="并" />[1.18 * 10^-38, 3.4 * 10^38]</td>
<td style="text-align: center;">约7位有效数</td>
</tr>
<tr class="even">
<td style="text-align: center;">双精度浮点数</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">见前表</td>
<td style="text-align: center;">[-1023, 1024]</td>
<td style="text-align: center;">+1023</td>
<td style="text-align: center;">[-1.8 * 10^308, -2.23 * 10^-308] <img src="https://i.loli.net/2021/06/09/Z4C19XOkBzTGUtR.png" alt="并" />[2.23 * 10^-308, 1.8 * 10^308]</td>
<td style="text-align: center;">约16位有效数</td>
</tr>
</tbody>
</table>
<p>示例：对于float型变量2.1,其内存视图如图所示</p>
<figure>
<img src="https://i.loli.net/2021/06/08/9IhMvi6GonUuSpF.png" alt="浮点数2.1的内存视图" /><figcaption aria-hidden="true">浮点数2.1的内存视图</figcaption>
</figure>
<center style="font-size:14px;color:#C0C0C0;text-decoration:underline">
浮点数2.1的内存视图
</center>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>内存</tag>
      </tags>
  </entry>
</search>
